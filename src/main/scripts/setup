#!/usr/bin/env python
from setup_utils import *
import os

# ijp

def uninstall():
    app = actions.getAppName("ijp.server")
    if app: actions.undeploy( app )
    # props["db.name"] was originally hard-wired as "ijp"
    actions.unregisterDB( props["db.name"] )

actions, arg, props = getActions("setup.properties", ["container","home","secure","port","db.driver","db.username","db.password","db.name"], binDir=False)

prop_name = "run.properties"
prop_list = ["icat.url", "ids.url", "ijp.url", "authn.list","reader", "writer","batchserverUrls","facilities"]

if arg in ["CONFIGURE", "INSTALL"]:
    actions.configure(prop_name, prop_list, dir="ijp")

ijpProperties = getProperties(os.path.join("ijp", prop_name), prop_list)

if arg in ["CONFIGURE", "INSTALL"]:
    actions.checkNoErrors()
    
if arg == "INSTALL":   
    actions.installDir("ijp")
    
    try:
        uninstall()
              
        # props["db.name"] originally hard-wired as "ijp"
        actions.registerDB( props["db.name"], props["db.driver"], props["db.url"], props["db.username"], props["db.password"])

        ovfiles = [[os.path.join("ijp", prop_name), "WEB-INF/classes"]]
        if os.path.exists("logback.xml"): ovfiles.append(["logback.xml", "WEB-INF/classes"])
        actions.deploy(deploymentorder=140, files=ovfiles, jmsTopicConnectionFactory=ijpProperties.get("jms.topicConnectionFactory"), target=props.get("db.target"), logging=props.get("db.logging"))
                    
    except Exception, e:
        abort(str(e))
               
if arg == "UNINSTALL":
    actions.removeDir("ijp")
    
    try:
        uninstall()
    except Exception, e:
        abort(str(e))       
